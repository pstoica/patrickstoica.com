---
import Sketch from "@/layouts/Sketch.astro";
---

<Sketch
  title="P5.js Sketch 1"
  maxWidth="max-w-[50vw]"
  backgroundColor="bg-black"
>
  <div id="sketch-container" class="w-full h-full"></div>
</Sketch>

<script>
  import p5 from "p5";

  interface Particle {
    x: number;
    y: number;
    size: number;
    rotation: number;
    colorIndex: number;
    decayTime: number;
    creationTime: number;
    noiseOffsetX: number;
    noiseOffsetY: number;
    strokeOrFill: "stroke" | "fill";
    initialOpacity: number; // New property for initial opacity
  }

  const sketch = (p: p5) => {
    let particles: Particle[] = [];
    const maxParticles = 10000;
    let colorTable: p5.Color[];

    // Customizable parameters
    let xFreq = 0.01;
    let yFreq = 0.015;
    let colorFreq = 0.5;
    let sizeFreq = 0.3;
    let decayFreq = 0.5;
    let samplingInterval = 1; // in milliseconds
    let lastSampleTime = 0;
    let sides = 3; // Set to 0 for circles, or any number > 2 for polygons

    // New parameters for stroke and fill
    let strokeOrFillFreq = 0.1;

    // New parameter for opacity frequency
    let opacityFreq = 0.2;

    let isWireframeMode = false; // New variable to track wireframe mode

    p.setup = () => {
      const container = document.getElementById("sketch-container");
      p.createCanvas(container!.clientWidth, container!.clientHeight);
      p.colorMode(p.HSB);
      colorTable = createColorTable();
    };

    p.draw = () => {
      p.background(0, 0, 0, 1);

      // Sample new particle at interval
      if (p.millis() - lastSampleTime > samplingInterval) {
        if (particles.length < maxParticles) {
          particles.push(createParticle());
        }
        lastSampleTime = p.millis();
      }

      // Update and draw particles
      particles = particles.filter((particle) => {
        updateParticle(particle);
        drawParticle(particle);
        return p.millis() - particle.creationTime <= particle.decayTime;
      });
    };

    p.keyPressed = () => {
      if (p.key === "w" || p.key === "W") {
        isWireframeMode = !isWireframeMode;
      }
    };

    function createColorTable(): p5.Color[] {
      const table: p5.Color[] = [];
      for (let i = 0; i < 360; i++) {
        let hue = i;
        let saturation = 50;
        let brightness = 95;

        // Adjust yellows to be more vibrant and less mustard-like
        // if (i >= 45 && i <= 65) {
        //   saturation = 80;
        //   brightness = 100;
        // }
        // // Adjust greens
        // else if (i > 65 && i <= 150) {
        //   saturation = 70;
        //   brightness = 90;
        // }

        table.push(p.color(hue, saturation, brightness));
      }
      return table;
    }

    function createParticle(): Particle {
      return {
        x: parametricX(p.frameCount * xFreq),
        y: parametricY(p.frameCount * yFreq),
        size: parametricSize(p.frameCount * sizeFreq),
        rotation: parametricRotation(p.frameCount),
        colorIndex: parametricColor(p.frameCount * colorFreq),
        decayTime: parametricDecay(p.frameCount * decayFreq),
        creationTime: p.millis(),
        noiseOffsetX: p.random(1000),
        noiseOffsetY: p.random(1000),
        strokeOrFill: parametricStrokeOrFill(p.frameCount * strokeOrFillFreq),
        initialOpacity: parametricOpacity(p.frameCount * opacityFreq),
      };
    }

    function updateParticle(particle: Particle) {
      const noiseAmount = parametricNoiseAmount(p.frameCount * 0.01);
      particle.x += p.map(
        p.noise(particle.noiseOffsetX),
        0,
        1,
        -noiseAmount,
        noiseAmount
      );
      particle.y += p.map(
        p.noise(particle.noiseOffsetY),
        0,
        1,
        -noiseAmount,
        noiseAmount
      );
      particle.noiseOffsetX += 0.01;
      particle.noiseOffsetY += 0.01;
    }

    function drawParticle(particle: Particle) {
      const age = p.millis() - particle.creationTime;
      const lifeRatio = 1 - age / particle.decayTime;

      p.push();
      p.translate(particle.x * p.width, particle.y * p.height);
      p.rotate(particle.rotation);

      const col =
        colorTable[Math.floor(particle.colorIndex * colorTable.length)];

      let currentOpacity = particle.initialOpacity * lifeRatio;
      if (isWireframeMode) {
        currentOpacity = Math.min(currentOpacity, 0.3);
      }

      if (isWireframeMode || particle.strokeOrFill === "stroke") {
        p.stroke(
          p.hue(col),
          p.saturation(col),
          p.brightness(col),
          currentOpacity
        );
        p.strokeWeight(2);
        p.noFill();
      } else {
        p.fill(
          p.hue(col),
          p.saturation(col),
          p.brightness(col),
          currentOpacity
        );
        p.noStroke();
      }

      if (sides === 0 || sides < 3) {
        // Draw a circle
        p.ellipse(0, 0, particle.size * 2);
      } else {
        // Draw a polygon
        p.beginShape();
        for (let i = 0; i < sides; i++) {
          const angle = (p.TWO_PI / sides) * i;
          const px = p.cos(angle) * particle.size;
          const py = p.sin(angle) * particle.size;
          p.vertex(px, py);
        }
        p.endShape(p.CLOSE);
      }

      p.pop();
    }

    // Oscillator function
    function oscillator(
      t: number,
      freq: number,
      amp: number,
      phase: number = 0
    ): number {
      return amp * p.sin(freq * t + phase);
    }

    // FM oscillator function
    function fmOscillator(
      t: number,
      carrier: number,
      modulator: number,
      index: number
    ): number {
      return p.sin(carrier * t + index * oscillator(t, modulator, 1));
    }

    // Parametric functions
    function parametricX(t: number): number {
      return 0.5 + 0.4 * fmOscillator(t, 2, 1.1, 0);
    }

    function parametricY(t: number): number {
      return 0.5 + 0.4 * fmOscillator(t, 0.5, 0.1, 0);
    }

    function parametricSize(t: number): number {
      // Add PI/2 to the time to shift the phase
      return p.map(oscillator(t, 0.25, 1, -Math.PI / 2), -1, 1, 0, 100);
    }

    function parametricRotation(t: number): number {
      // Continuous rotation
      return t * 0.1;
    }

    function parametricColor(t: number): number {
      return p.map(oscillator(t, 0.2, 1), -1, 1, 0, 1);
    }

    function parametricDecay(t: number): number {
      return 50000;
    }

    function parametricStrokeOrFill(t: number): "stroke" | "fill" {
      return "fill";
      // return "stroke";
    }

    // New parametric function for opacity
    function parametricOpacity(t: number): number {
      // return 0.3;
      return 0.5;
    }

    // Add this function back
    function parametricNoiseAmount(t: number): number {
      // return 0.00005;
      return 0;
    }

    p.windowResized = () => {
      const container = document.getElementById("sketch-container");
      p.resizeCanvas(container!.clientWidth, container!.clientHeight);
    };
  };

  new p5(sketch, document.getElementById("sketch-container") as HTMLElement);

  // function parametricX(t: number): number {
  //   return 0.5 + 0.4 * fmOscillator(t, 8, 10, 0.5) + 0.1 * oscillator(t, 5, 1);
  // }

  //   function complexOscillator(t: number, freqs: number[], amps: number[]): number {
  //     return freqs.reduce((sum, freq, index) => sum + oscillator(t, freq, amps[index]), 0);
  // }
</script>
